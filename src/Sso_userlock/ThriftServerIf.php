<?php
namespace xltxlm\ssoclient\Sso_userlock;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ThriftServerIf {
  /**
   * @param \xltxlm\ssoclient\Sso_userlock\SsoUserlock $SsoUserlock
   * @return int
   */
  public function Sso_userlockInsert(\xltxlm\ssoclient\Sso_userlock\SsoUserlock $SsoUserlock);
  /**
   * @param \xltxlm\ssoclient\Sso_userlock\SsoUserlock $SsoUserlock
   * @return \xltxlm\ssoclient\Sso_userlock\SsoUserlock Structs are the basic complex data structures. They are comprised of fields
   * which each have an integer identifier, a type, a symbolic name, and an
   * optional default value.
   * 
   * Fields can be declared "optional", which ensures they will not be included
   * in the serialized output if they aren't set.  Note that this requires some
   * manual management in some languages.
   * 
   */
  public function Sso_userlockSelectOne(\xltxlm\ssoclient\Sso_userlock\SsoUserlock $SsoUserlock);
  /**
   * @param \xltxlm\ssoclient\Sso_userlock\SsoUserlock $SsoUserlock
   * @return \xltxlm\ssoclient\Sso_userlock\SsoUserlock[]
   */
  public function Sso_userlockSelectAll(\xltxlm\ssoclient\Sso_userlock\SsoUserlock $SsoUserlock);
}


